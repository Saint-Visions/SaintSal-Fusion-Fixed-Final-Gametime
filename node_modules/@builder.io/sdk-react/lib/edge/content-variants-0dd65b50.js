import { jsx as S, jsxs as H, Fragment as M } from "react/jsx-runtime";
import { lazy as C, useRef as Y, useState as k, useEffect as N } from "react";
import { TARGET as F, isBrowser as L, isEditing as $, isPreviewing as ue, setupBrowserForEditing as ve, createRegisterComponentMessage as xe, getDefaultCanTrack as j, getCookieSync as Se, _track as ne, fetchOneEntry as Te, createEditorListener as Ie, logFetch as ke, serializeIncludingFunctions as ae, logger as Ce, handleABTestingSync as we } from "./server-entry-fb5f2b80.js";
import { Video as Ve, Button as Ee, Columns as Re, Fragment as Ae, Image as De, Section as Pe, Symbol as Fe, Text as We, BuilderContext as Ne } from "./blocks-exports.mjs";
import { triggerAnimation as $e, evaluate as de, fastClone as _e, InlinedStyles as ce, ComponentsContext as Le, Blocks as Ue } from "./blocks-0269007e.js";
function tn(e, t, n, o) {
  function r(m) {
    return typeof m == "string";
  }
  function l(m) {
    return typeof m == "number";
  }
  function a(m, g) {
    return (() => {
      const T = g.property, A = g.operator;
      let s = g.value;
      if (g && g.property === "urlPath" && g.value && typeof g.value == "string" && g.value !== "/" && g.value.endsWith("/") && (s = g.value.slice(0, -1)), !(T && A))
        return !0;
      if (Array.isArray(s))
        return A === "isNot" ? s.every((D) => a(m, {
          property: T,
          operator: A,
          value: D
        })) : !!s.find((D) => a(m, {
          property: T,
          operator: A,
          value: D
        }));
      const d = m[T];
      if (Array.isArray(d))
        return d.includes(s);
      switch (A) {
        case "is":
          return d === s;
        case "isNot":
          return d !== s;
        case "contains":
          return (r(d) || Array.isArray(d)) && d.includes(String(s));
        case "startsWith":
          return r(d) && d.startsWith(String(s));
        case "endsWith":
          return r(d) && d.endsWith(String(s));
        case "greaterThan":
          return l(d) && l(s) && d > s;
        case "lessThan":
          return l(d) && l(s) && d < s;
        case "greaterThanOrEqualTo":
          return l(d) && l(s) && d >= s;
        case "lessThanOrEqualTo":
          return l(d) && l(s) && d <= s;
        default:
          return !1;
      }
    })();
  }
  const i = {
    query: t,
    startDate: n,
    endDate: o
  }, u = e.date && new Date(e.date) || /* @__PURE__ */ new Date();
  return i.startDate && new Date(i.startDate) > u || i.endDate && new Date(i.endDate) < u ? !1 : !i.query || !i.query.length ? !0 : i.query.every((m) => a(e, m));
}
const Be = `function getPersonalizedVariant(variants, blockId, isHydrationTarget, locale) {
  if (!navigator.cookieEnabled) {
    return;
  }
  function getCookie(name) {
    const nameEQ = name + '=';
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) == ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
  }
  const attributes = JSON.parse(getCookie('builder.userAttributes') || '{}');
  if (locale) {
    attributes.locale = locale;
  }
  const winningVariantIndex = variants?.findIndex(function (variant) {
    return window.filterWithCustomTargeting(attributes, variant.query, variant.startDate, variant.endDate);
  });
  const parentDiv = document.currentScript?.parentElement;
  const variantId = parentDiv?.getAttribute('data-variant-id');
  const isDefaultVariant = variantId === \`\${blockId}-default\`;
  const isWinningVariant = winningVariantIndex !== -1 && variantId === \`\${blockId}-\${winningVariantIndex}\` || winningVariantIndex === -1 && isDefaultVariant;
  if (isWinningVariant && !isDefaultVariant) {
    parentDiv?.removeAttribute('hidden');
    parentDiv?.removeAttribute('aria-hidden');
  } else if (!isWinningVariant && isDefaultVariant) {
    parentDiv?.setAttribute('hidden', 'true');
    parentDiv?.setAttribute('aria-hidden', 'true');
  }
  if (isHydrationTarget) {
    if (!isWinningVariant) {
      const itsStyleEl = parentDiv?.previousElementSibling;
      if (itsStyleEl) {
        itsStyleEl.remove();
      }
      parentDiv?.remove();
    }
    const thisScript = document.currentScript;
    if (thisScript) {
      thisScript.remove();
    }
  }
}`, He = `function filterWithCustomTargeting(userAttributes, query, startDate, endDate) {
  function isString(val) {
    return typeof val === 'string';
  }
  function isNumber(val) {
    return typeof val === 'number';
  }
  function objectMatchesQuery(userattr, query) {
    const result = (() => {
      const property = query.property;
      const operator = query.operator;
      let testValue = query.value;
      if (query && query.property === 'urlPath' && query.value && typeof query.value === 'string' && query.value !== '/' && query.value.endsWith('/')) {
        testValue = query.value.slice(0, -1);
      }
      if (!(property && operator)) {
        return true;
      }
      if (Array.isArray(testValue)) {
        if (operator === 'isNot') {
          return testValue.every(val => objectMatchesQuery(userattr, {
            property,
            operator,
            value: val
          }));
        }
        return !!testValue.find(val => objectMatchesQuery(userattr, {
          property,
          operator,
          value: val
        }));
      }
      const value = userattr[property];
      if (Array.isArray(value)) {
        return value.includes(testValue);
      }
      switch (operator) {
        case 'is':
          return value === testValue;
        case 'isNot':
          return value !== testValue;
        case 'contains':
          return (isString(value) || Array.isArray(value)) && value.includes(String(testValue));
        case 'startsWith':
          return isString(value) && value.startsWith(String(testValue));
        case 'endsWith':
          return isString(value) && value.endsWith(String(testValue));
        case 'greaterThan':
          return isNumber(value) && isNumber(testValue) && value > testValue;
        case 'lessThan':
          return isNumber(value) && isNumber(testValue) && value < testValue;
        case 'greaterThanOrEqualTo':
          return isNumber(value) && isNumber(testValue) && value >= testValue;
        case 'lessThanOrEqualTo':
          return isNumber(value) && isNumber(testValue) && value <= testValue;
        default:
          return false;
      }
    })();
    return result;
  }
  const item = {
    query,
    startDate,
    endDate
  };
  const now = userAttributes.date && new Date(userAttributes.date) || new Date();
  if (item.startDate && new Date(item.startDate) > now) {
    return false;
  } else if (item.endDate && new Date(item.endDate) < now) {
    return false;
  }
  if (!item.query || !item.query.length) {
    return true;
  }
  return item.query.every(filter => {
    return objectMatchesQuery(userAttributes, filter);
  });
}`, Oe = `function updateVisibilityStylesScript(variants, blockId, isHydrationTarget, locale) {
  function getCookie(name) {
    const nameEQ = name + '=';
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) == ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
  }
  const visibilityStylesEl = document.currentScript?.previousElementSibling;
  if (!visibilityStylesEl) {
    return;
  }
  if (isHydrationTarget) {
    visibilityStylesEl.remove();
    const currentScript = document.currentScript;
    if (currentScript) {
      currentScript.remove();
    }
  } else {
    const attributes = JSON.parse(getCookie('builder.userAttributes') || '{}');
    if (locale) {
      attributes.locale = locale;
    }
    const winningVariantIndex = variants?.findIndex(function (variant) {
      return window.filterWithCustomTargeting(attributes, variant.query, variant.startDate, variant.endDate);
    });
    if (winningVariantIndex !== -1) {
      let newStyleStr = variants?.map((_, index) => {
        if (index === winningVariantIndex) return '';
        return \`div[data-variant-id="\${blockId}-\${index}"] { display: none !important; } \`;
      }).join('') || '';
      newStyleStr += \`div[data-variant-id="\${blockId}-default"] { display: none !important; } \`;
      visibilityStylesEl.innerHTML = newStyleStr;
    }
  }
}`, qe = "default", je = "filterWithCustomTargeting", me = "builderIoPersonalization", pe = "updateVisibilityStylesScript", fe = ["react", "vue", "svelte", "qwik"], Me = ["vue", "svelte", "qwik"];
function nn(e, t) {
  return !(e && e.length > 0) || !t ? !1 : Me.includes(F) ? !0 : !L();
}
function an({
  variants: e,
  previewingIndex: t,
  isHydrated: n,
  filteredVariants: o,
  fallbackBlocks: r
}) {
  var a;
  const l = {
    blocks: r != null ? r : [],
    path: "this.children",
    index: qe
  };
  if (n && $()) {
    if (typeof t == "number" && t < ((a = e == null ? void 0 : e.length) != null ? a : 0)) {
      const i = e == null ? void 0 : e[t];
      if (i)
        return {
          blocks: i.blocks,
          path: `variants.${t}.blocks`,
          index: t
        };
    }
    return l;
  }
  if (L()) {
    const i = o == null ? void 0 : o[0];
    if (i && e) {
      const u = e.indexOf(i);
      if (u !== -1)
        return {
          blocks: i.blocks,
          path: `variants.${u}.blocks`,
          index: u
        };
    }
  }
  return l;
}
const Ke = () => `
  window.${je} = ${He}
  window.${me} = ${Be}
  window.${pe} = ${Oe}
  `, ge = F === "react", on = (e, t, n) => `window.${me}(${JSON.stringify(e)}, "${t}", ${ge}${n ? `, "${n}"` : ""})`, rn = (e, t, n) => `window.${pe}(${JSON.stringify(e)}, "${t}", ${ge}${n ? `, "${n}"` : ""})`, K = {
  "@type": "@builder.io/sdk:Element",
  layerName: "Accordion item title",
  responsiveStyles: {
    large: {
      marginTop: "10px",
      position: "relative",
      display: "flex",
      alignItems: "stretch",
      flexDirection: "column",
      paddingBottom: "10px"
    }
  },
  children: [{
    "@type": "@builder.io/sdk:Element",
    responsiveStyles: {
      large: {
        textAlign: "left",
        display: "flex",
        flexDirection: "column"
      }
    },
    component: {
      name: "Text",
      options: {
        text: "I am an accordion title. Click me!"
      }
    }
  }]
}, z = {
  "@type": "@builder.io/sdk:Element",
  layerName: "Accordion item detail",
  responsiveStyles: {
    large: {
      position: "relative",
      display: "flex",
      alignItems: "stretch",
      flexDirection: "column",
      marginTop: "10px",
      paddingBottom: "10px"
    }
  },
  children: [{
    "@type": "@builder.io/sdk:Element",
    responsiveStyles: {
      large: {
        paddingTop: "50px",
        textAlign: "left",
        display: "flex",
        flexDirection: "column",
        paddingBottom: "50px"
      }
    },
    component: {
      name: "Text",
      options: {
        text: "I am an accordion detail, hello!"
      }
    }
  }]
}, ze = {
  name: "Builder:Accordion",
  canHaveChildren: !0,
  image: "https://cdn.builder.io/api/v1/image/assets%2FagZ9n5CUKRfbL9t6CaJOyVSK4Es2%2Ffab6c1fd3fe542408cbdec078bca7f35",
  defaultStyles: {
    display: "flex",
    flexDirection: "column",
    alignItems: "stretch"
  },
  inputs: [{
    name: "items",
    type: "list",
    broadcast: !0,
    subFields: [{
      name: "title",
      type: "uiBlocks",
      hideFromUI: !0,
      defaultValue: [K]
    }, {
      name: "detail",
      type: "uiBlocks",
      hideFromUI: !0,
      defaultValue: [z]
    }],
    defaultValue: [{
      title: [K],
      detail: [z]
    }, {
      title: [K],
      detail: [z]
    }],
    showIf: (e) => !e.get("useChildrenForItems")
  }, {
    name: "oneAtATime",
    helperText: "Only allow opening one at a time (collapse all others when new item openned)",
    type: "boolean",
    defaultValue: !1
  }, {
    name: "grid",
    helperText: "Display as a grid",
    type: "boolean",
    defaultValue: !1
  }, {
    name: "gridRowWidth",
    helperText: "Display as a grid",
    type: "string",
    showIf: (e) => e.get("grid"),
    defaultValue: "25%"
  }, {
    name: "useChildrenForItems",
    type: "boolean",
    helperText: "Use child elements for each slide, instead of the array. Useful for dynamically repeating items",
    advanced: !0,
    defaultValue: !1,
    onChange: (e) => {
      e.get("useChildrenForItems") === !0 && e.set("items", []);
    }
  }],
  shouldReceiveBuilderProps: {
    builderBlock: !0,
    builderContext: !0,
    builderComponents: !0,
    builderLinkComponent: !0
  }
}, Je = C(() => import("./accordion-d3831f48.js")), Qe = {
  name: "Core:Button",
  image: "https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2F81a15681c3e74df09677dfc57a615b13",
  defaultStyles: {
    // TODO: make min width more intuitive and set one
    appearance: "none",
    paddingTop: "15px",
    paddingBottom: "15px",
    paddingLeft: "25px",
    paddingRight: "25px",
    backgroundColor: "#000000",
    color: "white",
    borderRadius: "4px",
    textAlign: "center",
    cursor: "pointer"
  },
  inputs: [{
    name: "text",
    type: "text",
    defaultValue: "Click me!",
    bubble: !0
  }, {
    name: "link",
    type: "url",
    bubble: !0
  }, {
    name: "openLinkInNewTab",
    type: "boolean",
    defaultValue: !1,
    friendlyName: "Open link in new tab"
  }],
  static: !0,
  noWrap: !0,
  shouldReceiveBuilderProps: {
    builderLinkComponent: !0
  }
}, Ye = {
  // TODO: ways to statically preprocess JSON for references, functions, etc
  name: "Columns",
  isRSC: !0,
  inputs: [{
    name: "columns",
    type: "array",
    broadcast: !0,
    subFields: [{
      name: "blocks",
      type: "array",
      hideFromUI: !0,
      defaultValue: [{
        "@type": "@builder.io/sdk:Element",
        responsiveStyles: {
          large: {
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
            flexShrink: "0",
            position: "relative",
            marginTop: "30px",
            textAlign: "center",
            lineHeight: "normal",
            height: "auto",
            minHeight: "20px",
            minWidth: "20px",
            overflow: "hidden"
          }
        },
        component: {
          name: "Image",
          options: {
            image: "https://builder.io/api/v1/image/assets%2Fpwgjf0RoYWbdnJSbpBAjXNRMe9F2%2Ffb27a7c790324294af8be1c35fe30f4d",
            backgroundPosition: "center",
            backgroundSize: "cover",
            aspectRatio: 0.7004048582995948
          }
        }
      }, {
        "@type": "@builder.io/sdk:Element",
        responsiveStyles: {
          large: {
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
            flexShrink: "0",
            position: "relative",
            marginTop: "30px",
            textAlign: "center",
            lineHeight: "normal",
            height: "auto"
          }
        },
        component: {
          name: "Text",
          options: {
            text: "<p>Enter some text...</p>"
          }
        }
      }]
    }, {
      name: "width",
      type: "number",
      hideFromUI: !0,
      helperText: "Width %, e.g. set to 50 to fill half of the space"
    }, {
      name: "link",
      type: "url",
      helperText: "Optionally set a url that clicking this column will link to"
    }],
    defaultValue: [{
      blocks: [{
        "@type": "@builder.io/sdk:Element",
        responsiveStyles: {
          large: {
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
            flexShrink: "0",
            position: "relative",
            marginTop: "30px",
            textAlign: "center",
            lineHeight: "normal",
            height: "auto",
            minHeight: "20px",
            minWidth: "20px",
            overflow: "hidden"
          }
        },
        component: {
          name: "Image",
          options: {
            image: "https://builder.io/api/v1/image/assets%2Fpwgjf0RoYWbdnJSbpBAjXNRMe9F2%2Ffb27a7c790324294af8be1c35fe30f4d",
            backgroundPosition: "center",
            backgroundSize: "cover",
            aspectRatio: 0.7004048582995948
          }
        }
      }, {
        "@type": "@builder.io/sdk:Element",
        responsiveStyles: {
          large: {
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
            flexShrink: "0",
            position: "relative",
            marginTop: "30px",
            textAlign: "center",
            lineHeight: "normal",
            height: "auto"
          }
        },
        component: {
          name: "Text",
          options: {
            text: "<p>Enter some text...</p>"
          }
        }
      }]
    }, {
      blocks: [{
        "@type": "@builder.io/sdk:Element",
        responsiveStyles: {
          large: {
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
            flexShrink: "0",
            position: "relative",
            marginTop: "30px",
            textAlign: "center",
            lineHeight: "normal",
            height: "auto",
            minHeight: "20px",
            minWidth: "20px",
            overflow: "hidden"
          }
        },
        component: {
          name: "Image",
          options: {
            image: "https://builder.io/api/v1/image/assets%2Fpwgjf0RoYWbdnJSbpBAjXNRMe9F2%2Ffb27a7c790324294af8be1c35fe30f4d",
            backgroundPosition: "center",
            backgroundSize: "cover",
            aspectRatio: 0.7004048582995948
          }
        }
      }, {
        "@type": "@builder.io/sdk:Element",
        responsiveStyles: {
          large: {
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
            flexShrink: "0",
            position: "relative",
            marginTop: "30px",
            textAlign: "center",
            lineHeight: "normal",
            height: "auto"
          }
        },
        component: {
          name: "Text",
          options: {
            text: "<p>Enter some text...</p>"
          }
        }
      }]
    }],
    onChange: (e) => {
      function t() {
        n.forEach((o) => {
          o.delete("width");
        });
      }
      const n = e.get("columns");
      Array.isArray(n) && n.find((r) => r.get("width")) && (n.find((l) => !l.get("width")) || n.reduce((i, u) => i + u.get("width"), 0) !== 100) && t();
    }
  }, {
    name: "space",
    type: "number",
    defaultValue: 20,
    helperText: "Size of gap between columns",
    advanced: !0
  }, {
    name: "stackColumnsAt",
    type: "string",
    defaultValue: "tablet",
    helperText: "Convert horizontal columns to vertical at what device size",
    enum: ["tablet", "mobile", "never"],
    advanced: !0
  }, {
    name: "reverseColumnsWhenStacked",
    type: "boolean",
    defaultValue: !1,
    helperText: "When stacking columns for mobile devices, reverse the ordering",
    advanced: !0
  }],
  shouldReceiveBuilderProps: {
    builderBlock: !0,
    builderContext: !0,
    builderComponents: !0,
    builderLinkComponent: !0
  }
}, Ge = {
  name: "Fragment",
  static: !0,
  hidden: !0,
  canHaveChildren: !0,
  noWrap: !0
}, G = ["jpeg", "jpg", "png", "svg", "webp", "gif", "jfif", "pjpeg", "pjp", "apng", "avif", "tif", "tiff", "heif", "bmp", "eps", "raw", "cr2", "nef", "orf", "sr2", "psd", "heic", "dib", "ai"], Xe = ["mp4", "webm", "mkv", "flv", "vob", "ogv", "ogg", "drc", "gif", "gifv", "mng", "avi", "mov", "qt", "mts", "m2ts", "ts", "wmv", "yuv", "rm", "rmvb", "viv", "asf", "amv", "m4p", "mpeg", "mpe", "m2v", "m4v", "svi", "3gp", "3g2", "mxf", "roq", "nsv", "f4v", "f4p", "f4a", "f4b"], Ze = {
  name: "Image",
  static: !0,
  image: "https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-insert_photo-24px.svg?alt=media&token=4e5d0ef4-f5e8-4e57-b3a9-38d63a9b9dc4",
  defaultStyles: {
    position: "relative",
    minHeight: "20px",
    minWidth: "20px",
    overflow: "hidden"
  },
  canHaveChildren: !0,
  inputs: [{
    name: "image",
    type: "file",
    bubble: !0,
    allowedFileTypes: G,
    required: !0,
    defaultValue: "https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F72c80f114dc149019051b6852a9e3b7a",
    onChange: (e) => {
      e.delete("srcset"), e.delete("noWebp");
      function n(a, i = 6e4) {
        return new Promise((u, m) => {
          const g = document.createElement("img");
          let R = !1;
          g.onload = () => {
            R = !0, u(g);
          }, g.addEventListener("error", (T) => {
            console.warn("Image load failed", T.error), m(T.error);
          }), g.src = a, setTimeout(() => {
            R || m(new Error("Image load timed out"));
          }, i);
        });
      }
      function o(a) {
        return Math.round(a * 1e3) / 1e3;
      }
      const r = e.get("image"), l = e.get("aspectRatio");
      if (fetch(r).then((a) => a.blob()).then((a) => {
        a.type.includes("svg") && e.set("noWebp", !0);
      }), r && (!l || l === 0.7041))
        return n(r).then((a) => {
          const i = e.get("aspectRatio");
          e.get("image") === r && (!i || i === 0.7041) && a.width && a.height && (e.set("aspectRatio", o(a.height / a.width)), e.set("height", a.height), e.set("width", a.width));
        });
    }
  }, {
    name: "backgroundSize",
    type: "text",
    defaultValue: "cover",
    enum: [{
      label: "contain",
      value: "contain",
      helperText: "The image should never get cropped"
    }, {
      label: "cover",
      value: "cover",
      helperText: "The image should fill it's box, cropping when needed"
    }]
  }, {
    name: "backgroundPosition",
    type: "text",
    defaultValue: "center",
    enum: ["center", "top", "left", "right", "bottom", "top left", "top right", "bottom left", "bottom right"]
  }, {
    name: "altText",
    type: "string",
    helperText: "Text to display when the user has images off"
  }, {
    name: "title",
    type: "string",
    helperText: "Text to display when hovering over the asset"
  }, {
    name: "height",
    type: "number",
    hideFromUI: !0
  }, {
    name: "width",
    type: "number",
    hideFromUI: !0
  }, {
    name: "sizes",
    type: "string",
    hideFromUI: !0
  }, {
    name: "srcset",
    type: "string",
    hideFromUI: !0
  }, {
    name: "lazy",
    type: "boolean",
    defaultValue: !0,
    hideFromUI: !0
  }, {
    name: "fitContent",
    type: "boolean",
    helperText: "When child blocks are provided, fit to them instead of using the image's aspect ratio",
    defaultValue: !0
  }, {
    name: "highPriority",
    type: "boolean",
    advanced: !0,
    helperText: "Mark this image as high priority compared to other images on the page. This prevents lazy loading of the image and tells the browser to load this image before others on the page."
  }, {
    name: "aspectRatio",
    type: "number",
    helperText: "This is the ratio of height/width, e.g. set to 1.5 for a 300px wide and 200px tall photo. Set to 0 to not force the image to maintain it's aspect ratio",
    advanced: !0,
    defaultValue: 0.7041
  }],
  shouldReceiveBuilderProps: {
    builderBlock: !0
  }
}, et = {
  name: "PersonalizationContainer",
  shouldReceiveBuilderProps: {
    builderBlock: !0,
    builderContext: !0,
    builderComponents: !0
  },
  noWrap: !0,
  image: "https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F37229ed30d8c41dfb10b8cca1992053a",
  canHaveChildren: !0,
  inputs: [{
    name: "variants",
    defaultValue: [],
    behavior: "personalizationVariantList",
    type: "list",
    subFields: [{
      name: "name",
      type: "text"
    }, {
      name: "query",
      friendlyName: "Targeting rules",
      type: "BuilderQuery",
      defaultValue: []
    }, {
      name: "startDate",
      type: "date"
    }, {
      name: "endDate",
      type: "date"
    }, {
      name: "blocks",
      type: "uiBlocks",
      hideFromUI: !0,
      defaultValue: []
    }]
  }]
}, tt = C(() => import("./personalization-container-64f3cd71.js")), nt = {
  name: "Core:Section",
  static: !0,
  image: "https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2F682efef23ace49afac61748dd305c70a",
  inputs: [{
    name: "maxWidth",
    type: "number",
    defaultValue: 1200
  }, {
    name: "lazyLoad",
    type: "boolean",
    defaultValue: !1,
    advanced: !0,
    description: "Only render this section when in view"
  }],
  defaultStyles: {
    paddingLeft: "20px",
    paddingRight: "20px",
    paddingTop: "50px",
    paddingBottom: "50px",
    marginTop: "0px",
    width: "100vw",
    marginLeft: "calc(50% - 50vw)"
  },
  canHaveChildren: !0,
  defaultChildren: [{
    "@type": "@builder.io/sdk:Element",
    responsiveStyles: {
      large: {
        textAlign: "center"
      }
    },
    component: {
      name: "Text",
      options: {
        text: "<p><b>I am a section! My content keeps from getting too wide, so that it's easy to read even on big screens.</b></p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur</p>"
      }
    }
  }]
}, at = {
  name: "Slot",
  isRSC: !0,
  description: "Allow child blocks to be inserted into this content when used as a Symbol",
  docsLink: "https://www.builder.io/c/docs/symbols-with-blocks",
  image: "https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F3aad6de36eae43b59b52c85190fdef56",
  // Maybe wrap this for canHaveChildren so bind children to this hm
  inputs: [{
    name: "name",
    type: "string",
    required: !0,
    defaultValue: "children"
  }],
  shouldReceiveBuilderProps: {
    builderContext: !0,
    builderComponents: !0
  }
}, it = C(() => import("./slot-26ec2911.js")), ot = {
  name: "Symbol",
  noWrap: !0,
  static: !0,
  isRSC: !0,
  inputs: [{
    name: "symbol",
    type: "uiSymbol"
  }, {
    name: "dataOnly",
    helperText: "Make this a data symbol that doesn't display any UI",
    type: "boolean",
    defaultValue: !1,
    advanced: !0,
    hideFromUI: !0
  }, {
    name: "inheritState",
    helperText: "Inherit the parent component state and data",
    type: "boolean",
    defaultValue: !1,
    advanced: !0
  }, {
    name: "renderToLiquid",
    helperText: "Render this symbols contents to liquid. Turn off to fetch with javascript and use custom targeting",
    type: "boolean",
    defaultValue: !1,
    advanced: !0,
    hideFromUI: !0
  }, {
    name: "useChildren",
    hideFromUI: !0,
    type: "boolean"
  }],
  shouldReceiveBuilderProps: {
    builderBlock: !0,
    builderContext: !0,
    builderComponents: !0,
    builderLinkComponent: !0
  }
}, J = {
  "@type": "@builder.io/sdk:Element",
  responsiveStyles: {
    large: {
      paddingLeft: "20px",
      paddingRight: "20px",
      paddingTop: "10px",
      paddingBottom: "10px",
      minWidth: "100px",
      textAlign: "center",
      display: "flex",
      flexDirection: "column",
      cursor: "pointer",
      userSelect: "none"
    }
  },
  component: {
    name: "Text",
    options: {
      text: "New tab"
    }
  }
}, Q = {
  "@type": "@builder.io/sdk:Element",
  responsiveStyles: {
    large: {
      height: "200px",
      display: "flex",
      marginTop: "20px",
      flexDirection: "column"
    }
  },
  component: {
    name: "Text",
    options: {
      text: "New tab content "
    }
  }
}, rt = {
  name: "Builder: Tabs",
  inputs: [{
    name: "tabs",
    type: "list",
    broadcast: !0,
    subFields: [{
      name: "label",
      type: "uiBlocks",
      hideFromUI: !0,
      defaultValue: [J]
    }, {
      name: "content",
      type: "uiBlocks",
      hideFromUI: !0,
      defaultValue: [Q]
    }],
    defaultValue: [{
      label: [{
        ...J,
        component: {
          name: "Text",
          options: {
            text: "Tab 1"
          }
        }
      }],
      content: [{
        ...Q,
        component: {
          name: "Text",
          options: {
            text: "Tab 1 content"
          }
        }
      }]
    }, {
      label: [{
        ...J,
        component: {
          name: "Text",
          options: {
            text: "Tab 2"
          }
        }
      }],
      content: [{
        ...Q,
        component: {
          name: "Text",
          options: {
            text: "Tab 2 content"
          }
        }
      }]
    }]
  }, {
    name: "activeTabStyle",
    type: "uiStyle",
    helperText: "CSS styles for the active tab",
    defaultValue: {
      backgroundColor: "rgba(0, 0, 0, 0.1)"
    }
  }, {
    name: "defaultActiveTab",
    type: "number",
    helperText: 'Default tab to open to. Set to "1" for the first tab, "2" for the second, or choose "0" for none',
    defaultValue: 1,
    advanced: !0
  }, {
    name: "collapsible",
    type: "boolean",
    helperText: "If on, clicking an open tab closes it so no tabs are active",
    defaultValue: !1,
    advanced: !0
  }, {
    name: "tabHeaderLayout",
    type: "enum",
    helperText: "Change the layout of the tab headers (uses justify-content)",
    defaultValue: "flex-start",
    enum: [{
      label: "Center",
      value: "center"
    }, {
      label: "Space between",
      value: "space-between"
    }, {
      label: "Space around",
      value: "space-around"
    }, {
      label: "Left",
      value: "flex-start"
    }, {
      label: "Right",
      value: "flex-end"
    }]
  }],
  shouldReceiveBuilderProps: {
    builderBlock: !0,
    builderContext: !0,
    builderComponents: !0,
    builderLinkComponent: !0
  }
}, lt = C(() => import("./tabs-f9110171.js")), st = {
  shouldReceiveBuilderProps: {},
  name: "Text",
  static: !0,
  isRSC: !0,
  image: "https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-text_fields-24px%20(1).svg?alt=media&token=12177b73-0ee3-42ca-98c6-0dd003de1929",
  inputs: [{
    name: "text",
    type: "html",
    required: !0,
    autoFocus: !0,
    bubble: !0,
    defaultValue: "Enter some text..."
  }],
  defaultStyles: {
    lineHeight: "normal",
    height: "auto",
    textAlign: "center"
  }
}, ut = {
  name: "Custom Code",
  static: !0,
  requiredPermissions: ["editCode"],
  inputs: [{
    name: "code",
    type: "html",
    required: !0,
    defaultValue: "<p>Hello there, I am custom HTML code!</p>",
    code: !0
  }, {
    name: "replaceNodes",
    type: "boolean",
    helperText: "Preserve server rendered dom nodes",
    advanced: !0
  }, {
    name: "scriptsClientOnly",
    type: "boolean",
    defaultValue: !1,
    helperText: "Only print and run scripts on the client. Important when scripts influence DOM that could be replaced when client loads",
    advanced: !0
  }]
}, dt = C(() => import("./custom-code-f7a0f1c1.js")), ct = {
  name: "Embed",
  static: !0,
  inputs: [{
    name: "url",
    type: "url",
    required: !0,
    defaultValue: "",
    helperText: "e.g. enter a youtube url, google map, etc"
  }, {
    name: "content",
    type: "html",
    defaultValue: '<div style="padding: 20px; text-align: center">(Choose an embed URL)<div>',
    hideFromUI: !0
  }]
}, mt = C(() => import("./embed-e4979560.js")), pt = {
  name: "Form:Form",
  // editableTags: ['builder-form-error']
  defaults: {
    responsiveStyles: {
      large: {
        marginTop: "15px",
        paddingBottom: "15px"
      }
    }
  },
  image: "https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2Fef36d2a846134910b64b88e6d18c5ca5",
  inputs: [{
    name: "sendSubmissionsTo",
    type: "string",
    // TODO: save to builder data and user can download as csv
    // TODO: easy for mode too or computed add/remove fields form mode
    // so you can edit details and high level mode at same time...
    // Later - more integrations like mailchimp
    // /api/v1/form-submit?to=mailchimp
    enum: [{
      label: "Send to email",
      value: "email",
      helperText: "Send form submissions to the email address of your choosing"
    }, {
      label: "Custom",
      value: "custom",
      helperText: "Handle where the form requests go manually with a little code, e.g. to your own custom backend"
    }],
    defaultValue: "email"
  }, {
    name: "sendSubmissionsToEmail",
    type: "string",
    required: !0,
    // TODO: required: () => options.get("sendSubmissionsTo") === "email"
    defaultValue: "your@email.com",
    showIf: 'options.get("sendSubmissionsTo") === "email"'
  }, {
    name: "sendWithJs",
    type: "boolean",
    helperText: "Set to false to use basic html form action",
    defaultValue: !0,
    showIf: 'options.get("sendSubmissionsTo") === "custom"'
  }, {
    name: "name",
    type: "string",
    defaultValue: "My form"
    // advanced: true
  }, {
    name: "action",
    type: "string",
    helperText: "URL to send the form data to",
    showIf: 'options.get("sendSubmissionsTo") === "custom"'
  }, {
    name: "contentType",
    type: "string",
    defaultValue: "application/json",
    advanced: !0,
    // TODO: do automatically if file input
    enum: ["application/json", "multipart/form-data", "application/x-www-form-urlencoded"],
    showIf: 'options.get("sendSubmissionsTo") === "custom" && options.get("sendWithJs") === true'
  }, {
    name: "method",
    type: "string",
    showIf: 'options.get("sendSubmissionsTo") === "custom"',
    defaultValue: "POST",
    advanced: !0
  }, {
    name: "previewState",
    type: "string",
    // TODO: persist: false flag
    enum: ["unsubmitted", "sending", "success", "error"],
    defaultValue: "unsubmitted",
    helperText: 'Choose a state to edit, e.g. choose "success" to show what users see on success and edit the message',
    showIf: 'options.get("sendSubmissionsTo") !== "zapier" && options.get("sendWithJs") === true'
  }, {
    name: "successUrl",
    type: "url",
    helperText: "Optional URL to redirect the user to on form submission success",
    showIf: 'options.get("sendSubmissionsTo") !== "zapier" && options.get("sendWithJs") === true'
  }, {
    name: "resetFormOnSubmit",
    type: "boolean",
    showIf: "options.get('sendSubmissionsTo') === 'custom' && options.get('sendWithJs') === true",
    advanced: !0
  }, {
    name: "successMessage",
    type: "uiBlocks",
    hideFromUI: !0,
    defaultValue: [{
      "@type": "@builder.io/sdk:Element",
      responsiveStyles: {
        large: {
          marginTop: "10px"
        }
      },
      component: {
        name: "Text",
        options: {
          text: "<span>Thanks!</span>"
        }
      }
    }]
  }, {
    name: "validate",
    type: "boolean",
    defaultValue: !0,
    advanced: !0
  }, {
    name: "errorMessagePath",
    type: "text",
    advanced: !0,
    helperText: 'Path to where to get the error message from in a JSON response to display to the user, e.g. "error.message" for a response like { "error": { "message": "this username is taken" }}'
  }, {
    name: "errorMessage",
    type: "uiBlocks",
    hideFromUI: !0,
    defaultValue: [{
      "@type": "@builder.io/sdk:Element",
      responsiveStyles: {
        large: {
          marginTop: "10px"
        }
      },
      bindings: {
        "component.options.text": "state.formErrorMessage || block.component.options.text"
      },
      component: {
        name: "Text",
        options: {
          text: "<span>Form submission error :( Please check your answers and try again</span>"
        }
      }
    }]
  }, {
    name: "sendingMessage",
    type: "uiBlocks",
    hideFromUI: !0,
    defaultValue: [{
      "@type": "@builder.io/sdk:Element",
      responsiveStyles: {
        large: {
          marginTop: "10px"
        }
      },
      component: {
        name: "Text",
        options: {
          text: "<span>Sending...</span>"
        }
      }
    }]
  }, {
    name: "customHeaders",
    type: "map",
    valueType: {
      type: "string"
    },
    advanced: !0,
    showIf: 'options.get("sendSubmissionsTo") === "custom" && options.get("sendWithJs") === true'
  }],
  noWrap: !0,
  canHaveChildren: !0,
  defaultChildren: [{
    "@type": "@builder.io/sdk:Element",
    responsiveStyles: {
      large: {
        marginTop: "10px"
      }
    },
    component: {
      name: "Text",
      options: {
        text: "<span>Enter your name</span>"
      }
    }
  }, {
    "@type": "@builder.io/sdk:Element",
    responsiveStyles: {
      large: {
        marginTop: "10px"
      }
    },
    component: {
      name: "Form:Input",
      options: {
        name: "name",
        placeholder: "Jane Doe"
      }
    }
  }, {
    "@type": "@builder.io/sdk:Element",
    responsiveStyles: {
      large: {
        marginTop: "10px"
      }
    },
    component: {
      name: "Text",
      options: {
        text: "<span>Enter your email</span>"
      }
    }
  }, {
    "@type": "@builder.io/sdk:Element",
    responsiveStyles: {
      large: {
        marginTop: "10px"
      }
    },
    component: {
      name: "Form:Input",
      options: {
        name: "email",
        placeholder: "jane@doe.com"
      }
    }
  }, {
    "@type": "@builder.io/sdk:Element",
    responsiveStyles: {
      large: {
        marginTop: "10px"
      }
    },
    component: {
      name: "Form:SubmitButton",
      options: {
        text: "Submit"
      }
    }
  }],
  shouldReceiveBuilderProps: {
    builderBlock: !0,
    builderContext: !0,
    builderComponents: !0,
    builderLinkComponent: !0
  }
}, ft = C(() => import("./form-30fba682.js")), gt = {
  name: "Form:Input",
  image: "https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2Fad6f37889d9e40bbbbc72cdb5875d6ca",
  inputs: [
    {
      name: "type",
      type: "text",
      enum: ["text", "number", "email", "url", "checkbox", "radio", "range", "date", "datetime-local", "search", "tel", "time", "file", "month", "week", "password", "color", "hidden"],
      defaultValue: "text"
    },
    {
      name: "name",
      type: "string",
      required: !0,
      helperText: 'Every input in a form needs a unique name describing what it takes, e.g. "email"'
    },
    {
      name: "placeholder",
      type: "string",
      defaultValue: "Hello there",
      helperText: "Text to display when there is no value"
    },
    // TODO: handle value vs default value automatically like ng-model
    {
      name: "defaultValue",
      type: "string"
    },
    {
      name: "value",
      type: "string",
      advanced: !0
    },
    {
      name: "required",
      type: "boolean",
      helperText: "Is this input required to be filled out to submit a form",
      defaultValue: !1
    }
  ],
  noWrap: !0,
  static: !0,
  defaultStyles: {
    paddingTop: "10px",
    paddingBottom: "10px",
    paddingLeft: "10px",
    paddingRight: "10px",
    borderRadius: "3px",
    borderWidth: "1px",
    borderStyle: "solid",
    borderColor: "#ccc"
  }
}, ht = C(() => import("./input-e4a9fe0b.js")), bt = {
  name: "Form:Select",
  image: "https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2F83acca093fb24aaf94dee136e9a4b045",
  defaultStyles: {
    alignSelf: "flex-start"
  },
  inputs: [{
    name: "options",
    type: "list",
    required: !0,
    subFields: [{
      name: "value",
      type: "text",
      required: !0
    }, {
      name: "name",
      type: "text"
    }],
    defaultValue: [{
      value: "option 1"
    }, {
      value: "option 2"
    }]
  }, {
    name: "name",
    type: "string",
    required: !0,
    helperText: 'Every select in a form needs a unique name describing what it gets, e.g. "email"'
  }, {
    name: "defaultValue",
    type: "string"
  }, {
    name: "value",
    type: "string",
    advanced: !0
  }, {
    name: "required",
    type: "boolean",
    defaultValue: !1
  }],
  static: !0,
  noWrap: !0
}, yt = C(() => import("./select-c59c9ac6.js")), vt = {
  name: "Form:SubmitButton",
  image: "https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2Fdf2820ffed1f4349a94c40b3221f5b98",
  defaultStyles: {
    appearance: "none",
    paddingTop: "15px",
    paddingBottom: "15px",
    paddingLeft: "25px",
    paddingRight: "25px",
    backgroundColor: "#3898EC",
    color: "white",
    borderRadius: "4px",
    cursor: "pointer"
  },
  inputs: [{
    name: "text",
    type: "text",
    defaultValue: "Click me"
  }],
  static: !0,
  noWrap: !0
  // TODO: optional children? maybe as optional form input
  // that only shows if advanced setting is flipped
  // TODO: defaultChildren
  // canHaveChildren: true,
}, xt = C(() => import("./submit-button-b48361a7.js")), St = {
  name: "Form:TextArea",
  image: "https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2Ff74a2f3de58c4c3e939204e5b6b8f6c3",
  inputs: [{
    advanced: !0,
    name: "value",
    type: "string"
  }, {
    name: "name",
    type: "string",
    required: !0,
    helperText: 'Every input in a form needs a unique name describing what it gets, e.g. "email"'
  }, {
    name: "defaultValue",
    type: "string"
  }, {
    name: "placeholder",
    type: "string",
    defaultValue: "Hello there"
  }, {
    name: "required",
    type: "boolean",
    defaultValue: !1
  }],
  defaultStyles: {
    paddingTop: "10px",
    paddingBottom: "10px",
    paddingLeft: "10px",
    paddingRight: "10px",
    borderRadius: "3px",
    borderWidth: "1px",
    borderStyle: "solid",
    borderColor: "#ccc"
  },
  static: !0,
  noWrap: !0
}, Tt = C(() => import("./textarea-d29025e9.js")), It = {
  // friendlyName?
  name: "Raw:Img",
  hideFromInsertMenu: !0,
  image: "https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-insert_photo-24px.svg?alt=media&token=4e5d0ef4-f5e8-4e57-b3a9-38d63a9b9dc4",
  inputs: [{
    name: "image",
    bubble: !0,
    type: "file",
    allowedFileTypes: G,
    required: !0
  }],
  noWrap: !0,
  static: !0
}, kt = C(() => import("./img-3bb375bf.js")), Ct = {
  name: "Video",
  canHaveChildren: !0,
  defaultStyles: {
    minHeight: "20px",
    minWidth: "20px"
  },
  image: "https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-videocam-24px%20(1).svg?alt=media&token=49a84e4a-b20e-4977-a650-047f986874bb",
  inputs: [{
    name: "video",
    type: "file",
    allowedFileTypes: Xe,
    bubble: !0,
    defaultValue: "https://cdn.builder.io/o/assets%2FYJIGb4i01jvw0SRdL5Bt%2Fd27731a526464deba0016216f5f9e570%2Fcompressed?apiKey=YJIGb4i01jvw0SRdL5Bt&token=d27731a526464deba0016216f5f9e570&alt=media&optimized=true",
    required: !0
  }, {
    name: "posterImage",
    type: "file",
    allowedFileTypes: G,
    helperText: "Image to show before the video plays"
  }, {
    name: "autoPlay",
    type: "boolean",
    defaultValue: !0
  }, {
    name: "controls",
    type: "boolean",
    defaultValue: !1
  }, {
    name: "muted",
    type: "boolean",
    defaultValue: !0
  }, {
    name: "loop",
    type: "boolean",
    defaultValue: !0
  }, {
    name: "playsInline",
    type: "boolean",
    defaultValue: !0
  }, {
    name: "fit",
    type: "text",
    defaultValue: "cover",
    enum: ["contain", "cover", "fill", "auto"]
  }, {
    name: "preload",
    type: "text",
    defaultValue: "metadata",
    enum: ["auto", "metadata", "none"]
  }, {
    name: "fitContent",
    type: "boolean",
    helperText: "When child blocks are provided, fit to them instead of using the aspect ratio",
    defaultValue: !0,
    advanced: !0
  }, {
    name: "position",
    type: "text",
    defaultValue: "center",
    enum: ["center", "top", "left", "right", "bottom", "top left", "top right", "bottom left", "bottom right"]
  }, {
    name: "height",
    type: "number",
    advanced: !0
  }, {
    name: "width",
    type: "number",
    advanced: !0
  }, {
    name: "aspectRatio",
    type: "number",
    advanced: !0,
    defaultValue: 0.7004048582995948
  }, {
    name: "lazyLoad",
    type: "boolean",
    helperText: 'Load this video "lazily" - as in only when a user scrolls near the video. Recommended for optmized performance and bandwidth consumption',
    defaultValue: !0,
    advanced: !0
  }],
  shouldReceiveBuilderProps: {
    builderBlock: !0
  }
}, wt = () => [{
  component: dt,
  ...ut
}, {
  component: mt,
  ...ct
}, {
  component: ft,
  ...pt
}, {
  component: ht,
  ...gt
}, {
  component: xt,
  ...vt
}, {
  component: yt,
  ...bt
}, {
  component: Tt,
  ...St
}, {
  component: kt,
  ...It
}, {
  component: Ve,
  ...Ct
}], ie = () => [{
  component: Ee,
  ...Qe
}, {
  component: Re,
  ...Ye
}, {
  component: Ae,
  ...Ge
}, {
  component: De,
  ...Ze
}, {
  component: Pe,
  ...nt
}, {
  component: it,
  ...at
}, {
  component: Fe,
  ...ot
}, {
  component: We,
  ...st
}, ...fe.includes(F) ? [{
  component: tt,
  ...et
}] : [], {
  component: lt,
  ...rt
}, {
  component: Je,
  ...ze
}, ...wt()], Vt = `function updateCookiesAndStyles(contentId, variants, isHydrationTarget, isAngularSDK) {
  function getAndSetVariantId() {
    function setCookie(name, value, days) {
      let expires = '';
      if (days) {
        const date = new Date();
        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
        expires = '; expires=' + date.toUTCString();
      }
      document.cookie = name + '=' + (value || '') + expires + '; path=/' + '; Secure; SameSite=None';
    }
    function getCookie(name) {
      const nameEQ = name + '=';
      const ca = document.cookie.split(';');
      for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
      }
      return null;
    }
    const cookieName = \`builder.tests.\${contentId}\`;
    const variantInCookie = getCookie(cookieName);
    const availableIDs = variants.map(vr => vr.id).concat(contentId);
    if (variantInCookie && availableIDs.includes(variantInCookie)) {
      return variantInCookie;
    }
    let n = 0;
    const random = Math.random();
    for (let i = 0; i < variants.length; i++) {
      const variant = variants[i];
      const testRatio = variant.testRatio;
      n += testRatio;
      if (random < n) {
        setCookie(cookieName, variant.id);
        return variant.id;
      }
    }
    setCookie(cookieName, contentId);
    return contentId;
  }
  const winningVariantId = getAndSetVariantId();
  let styleEl = document.currentScript?.previousElementSibling;
  if (isAngularSDK) {
    styleEl = document.currentScript?.parentElement?.previousElementSibling?.querySelector('style');
  }
  if (isHydrationTarget) {
    styleEl.remove();
    const thisScriptEl = document.currentScript;
    thisScriptEl?.remove();
  } else {
    const newStyleStr = variants.concat({
      id: contentId
    }).filter(variant => variant.id !== winningVariantId).map(value => {
      return \`.variant-\${value.id} {  display: none; }
        \`;
    }).join('');
    styleEl.innerHTML = newStyleStr;
  }
}`, Et = `function updateVariantVisibility(variantContentId, defaultContentId, isHydrationTarget) {
  if (!navigator.cookieEnabled) {
    return;
  }
  function getCookie(name) {
    const nameEQ = name + '=';
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) === ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
  }
  const cookieName = \`builder.tests.\${defaultContentId}\`;
  const winningVariant = getCookie(cookieName);
  const parentDiv = document.currentScript?.parentElement;
  const isDefaultContent = variantContentId === defaultContentId;
  const isWinningVariant = winningVariant === variantContentId;
  if (isWinningVariant && !isDefaultContent) {
    parentDiv?.removeAttribute('hidden');
    parentDiv?.removeAttribute('aria-hidden');
  } else if (!isWinningVariant && isDefaultContent) {
    parentDiv?.setAttribute('hidden', 'true');
    parentDiv?.setAttribute('aria-hidden', 'true');
  }
  if (isHydrationTarget) {
    if (!isWinningVariant) {
      parentDiv?.remove();
    }
    const thisScriptEl = document.currentScript;
    thisScriptEl?.remove();
  }
  return;
}`, he = "builderIoAbTest", be = "builderIoRenderContent", O = (e) => Object.values((e == null ? void 0 : e.variations) || {}).map((t) => ({
  ...t,
  testVariationId: t.id,
  id: e == null ? void 0 : e.id
})), Rt = ({
  canTrack: e,
  content: t
}) => !(!(O(t).length > 0) || !e || L()), At = (e) => e === "react" || e === "reactNative", Dt = F === "angular", ye = At(F), Pt = () => `
  window.${he} = ${Vt}
  window.${be} = ${Et}
  `, Ft = (e, t) => `
  window.${he}(
    "${t}",${JSON.stringify(e)}, ${ye}, ${Dt}
  )`, Wt = ({
  contentId: e,
  variationId: t
}) => `window.${be}(
    "${t}", "${e}", ${ye}
  )`;
function q(e) {
  return /* @__PURE__ */ S(
    "script",
    {
      dangerouslySetInnerHTML: { __html: e.scriptStr },
      "data-id": e.id,
      nonce: e.nonce || ""
    }
  );
}
function oe(e) {
  return Math.round(e * 1e3) / 1e3;
}
const Nt = (e, t, n = !0) => {
  if (!(e instanceof HTMLElement))
    return null;
  let o = n ? e : e.parentElement;
  do {
    if (!o)
      return null;
    if (t(o))
      return o;
  } while (o = o.parentElement);
  return null;
}, $t = (e) => Nt(e, (t) => {
  const n = t.getAttribute("builder-id") || t.id;
  return (n == null ? void 0 : n.indexOf("builder-")) === 0;
}), re = ({
  event: e,
  target: t
}) => {
  const n = t.getBoundingClientRect(), o = e.clientX - n.left, r = e.clientY - n.top, l = oe(o / n.width), a = oe(r / n.height);
  return {
    x: l,
    y: a
  };
}, _t = (e) => {
  const t = e.target, n = t && $t(t), o = (n == null ? void 0 : n.getAttribute("builder-id")) || (n == null ? void 0 : n.id);
  return {
    targetBuilderElement: o || void 0,
    metadata: {
      targetOffset: t ? re({
        event: e,
        target: t
      }) : void 0,
      builderTargetOffset: n ? re({
        event: e,
        target: n
      }) : void 0,
      builderElementIndex: n && o ? [].slice.call(document.getElementsByClassName(o)).indexOf(n) : void 0
    }
  };
}, Lt = ["svelte", "qwik", "vue"], le = () => Lt.includes(F) && ($() || ue()), Ut = (e) => {
  var l, a;
  const t = e.family + (e.kind && !e.kind.includes("#") ? ", " + e.kind : ""), n = t.split(",")[0], o = (a = e.fileUrl) != null ? a : (l = e == null ? void 0 : e.files) == null ? void 0 : l.regular;
  let r = "";
  if (o && t && n && (r += `
@font-face {
font-family: "${t}";
src: local("${n}"), url('${o}') format('woff2');
font-display: fallback;
font-weight: 400;
}
      `.trim()), e.files)
    for (const i in e.files) {
      if (!(String(Number(i)) === i))
        continue;
      const m = e.files[i];
      m && m !== o && (r += `
@font-face {
font-family: "${t}";
src: url('${m}') format('woff2');
font-display: fallback;
font-weight: ${i};
}
        `.trim());
    }
  return r;
}, Bt = ({
  customFonts: e
}) => {
  var t;
  return ((t = e == null ? void 0 : e.map((n) => Ut(n))) == null ? void 0 : t.join(" ")) || "";
}, Ht = ({
  cssCode: e,
  contentId: t
}) => e ? t ? (e == null ? void 0 : e.replace(/&/g, `div[builder-content-id="${t}"]`)) || "" : e : "", Ot = `
.builder-button {
  all: unset;
}

.builder-text > p:first-of-type, .builder-text > .builder-paragraph:first-of-type {
  margin: 0;
}
.builder-text > p, .builder-text > .builder-paragraph {
  color: inherit;
  line-height: inherit;
  letter-spacing: inherit;
  font-weight: inherit;
  font-size: inherit;
  text-align: inherit;
  font-family: inherit;
}
`, qt = (e) => e ? "" : Ot, jt = (e) => `variant-${e}`;
function Mt(e) {
  var Z, ee, te;
  const t = Y(null);
  k(() => !1);
  const [n, o] = k(() => null), [r, l] = k(() => "");
  function a(c) {
    var h, b;
    const p = {
      ...e.builderContextSignal.rootState,
      ...c
    };
    e.builderContextSignal.rootSetState ? (b = (h = e.builderContextSignal).rootSetState) == null || b.call(h, p) : e.setBuilderContextSignal((f) => ({
      ...f,
      rootState: p
    }));
  }
  function i(c) {
    var h, b, f, v, P;
    const p = {
      ...e.builderContextSignal.content,
      ...c,
      data: {
        ...(h = e.builderContextSignal.content) == null ? void 0 : h.data,
        ...c == null ? void 0 : c.data
      },
      meta: {
        ...(b = e.builderContextSignal.content) == null ? void 0 : b.meta,
        ...c == null ? void 0 : c.meta,
        breakpoints: ((f = c == null ? void 0 : c.meta) == null ? void 0 : f.breakpoints) || ((P = (v = e.builderContextSignal.content) == null ? void 0 : v.meta) == null ? void 0 : P.breakpoints)
      }
    };
    e.setBuilderContextSignal((_) => ({
      ..._,
      content: p
    }));
  }
  function u() {
    return e.showContent ? {} : {
      hidden: !0,
      "aria-hidden": !0
    };
  }
  const [m, g] = k(
    () => e.contentWrapper || "div"
  );
  function R(c) {
    return Ie({
      model: e.model,
      trustedHosts: e.trustedHosts,
      callbacks: {
        configureSdk: (p) => {
          var f;
          const { breakpoints: h, contentId: b } = p;
          !b || b !== ((f = e.builderContextSignal.content) == null ? void 0 : f.id) || h && i({
            meta: {
              breakpoints: h
            }
          });
        },
        animation: (p) => {
          $e(p);
        },
        contentUpdate: (p) => {
          i(p);
        },
        stateUpdate: (p) => {
          a(p);
        }
      }
    })(c);
  }
  const [T, A] = k(() => ({})), [s, d] = k(() => ({})), [D, U] = k(() => !1);
  function I(c) {
    var p, h;
    if (e.builderContextSignal.content) {
      const b = (p = e.builderContextSignal.content) == null ? void 0 : p.testVariationId, f = (h = e.builderContextSignal.content) == null ? void 0 : h.id;
      ne({
        apiHost: e.apiHost,
        type: "click",
        canTrack: j(e.canTrack),
        contentId: f,
        apiKey: e.apiKey,
        variationId: b !== f ? b : void 0,
        ..._t(c),
        unique: !D
      });
    }
    D || U(!0);
  }
  function w() {
    var p, h, b;
    const c = (b = (h = (p = e.builderContextSignal.content) == null ? void 0 : p.data) == null ? void 0 : h.httpRequests) != null ? b : {};
    Object.entries(c).forEach(
      ([f, v]) => {
        if (!v)
          return;
        const P = typeof v == "object" && v["@type"] === "@builder.io/core:Request";
        if (s[f] || T[f] && !$())
          return;
        const _ = P ? v.request.url : v;
        s[f] = !0;
        const x = _.replace(
          /{{([^}]+)}}/g,
          (E, B) => String(
            de({
              code: B,
              context: e.context || {},
              localState: void 0,
              rootState: e.builderContextSignal.rootState,
              rootSetState: e.builderContextSignal.rootSetState
            })
          )
        ), y = P ? {
          url: x,
          method: v.request.method,
          headers: v.request.headers,
          body: v.request.body
        } : {
          url: x,
          method: "GET"
        };
        ke(JSON.stringify(y));
        const W = {
          method: y.method,
          headers: y.headers,
          body: y.body
        };
        y.method === "GET" && delete W.body, fetch(y.url, W).then((E) => E.json()).then((E) => {
          a({
            [f]: E
          }), T[f] = !0;
        }).catch((E) => {
          console.error(
            "error fetching dynamic data",
            JSON.stringify(v),
            E
          );
        }).finally(() => {
          s[f] = !1;
        });
      }
    );
  }
  function V() {
    $() && window.dispatchEvent(
      new CustomEvent(
        "builder:component:stateChange",
        {
          detail: {
            state: _e(e.builderContextSignal.rootState),
            ref: {
              name: e.model
            }
          }
        }
      )
    );
  }
  const X = Y(!1);
  return X.current || (w(), V(), X.current = !0), N(() => {
    var c, p, h, b, f;
    if (L()) {
      $() && !e.isNestedRender && (window.addEventListener("message", R), ve({
        ...e.locale ? {
          locale: e.locale
        } : {},
        ...e.enrich ? {
          enrich: e.enrich
        } : {},
        ...e.trustedHosts ? {
          trustedHosts: e.trustedHosts
        } : {},
        modelName: (c = e.model) != null ? c : "",
        apiKey: e.apiKey
      }), Object.values(
        e.builderContextSignal.componentInfos
      ).forEach((x) => {
        var y, W;
        if (!((y = x.models) != null && y.length) || x.models.includes(e.model)) {
          const E = xe(x);
          (W = window.parent) == null || W.postMessage(E, "*");
        }
      }), window.addEventListener(
        "builder:component:stateChangeListenerActivated",
        V
      ));
      const v = e.builderContextSignal.content && j(e.canTrack), P = Se({
        name: `builder.tests.${(p = e.builderContextSignal.content) == null ? void 0 : p.id}`,
        canTrack: !0
      }), _ = (h = e.builderContextSignal.content) == null ? void 0 : h.testVariationId;
      if (v && _ === P) {
        const x = (b = e.builderContextSignal.content) == null ? void 0 : b.id, y = e.apiKey;
        ne({
          apiHost: e.apiHost,
          type: "impression",
          canTrack: !0,
          contentId: x,
          apiKey: y,
          variationId: P !== x ? P : void 0
        });
      }
      if (ue() && !$()) {
        const x = new URL(location.href).searchParams, y = x.get("builder.preview"), W = x.get(
          `builder.overrides.${y}`
        ), E = x.get("apiKey") || x.get("builder.space");
        (y === "BUILDER_STUDIO" || y === e.model && E === e.apiKey && (!e.content || W === e.content.id)) && Te({
          model: e.model,
          apiKey: e.apiKey,
          apiVersion: e.builderContextSignal.apiVersion,
          ...y === "BUILDER_STUDIO" && ((f = e.context) != null && f.symbolId) ? {
            query: {
              id: e.context.symbolId
            }
          } : {}
        }).then((B) => {
          B && i(B);
        });
      }
    }
  }, []), N(() => {
    e.content && i(e.content);
  }, [e.content]), N(() => {
    V();
  }, [e.builderContextSignal.rootState]), N(() => {
    if (e.data) {
      if (n === e.data)
        return;
      a(e.data), o(e.data);
    }
  }, [e.data]), N(() => {
    if (e.locale) {
      if (r === e.locale)
        return;
      a({
        locale: e.locale
      }), l(e.locale);
    }
  }, [e.locale]), N(() => () => {
    L() && (window.removeEventListener("message", R), window.removeEventListener(
      "builder:component:stateChangeListenerActivated",
      V
    ));
  }, []), /* @__PURE__ */ S(Ne.Provider, { value: e.builderContextSignal, children: e.builderContextSignal.content || le() ? /* @__PURE__ */ S(
    m,
    {
      ref: t,
      onClick: (c) => I(c),
      "builder-content-id": (Z = e.builderContextSignal.content) == null ? void 0 : Z.id,
      "builder-model": e.model,
      className: jt(
        ((ee = e.content) == null ? void 0 : ee.testVariationId) || ((te = e.content) == null ? void 0 : te.id)
      ),
      style: {
        display: !e.builderContextSignal.content && le() ? "none" : void 0
      },
      ...u(),
      ...e.contentWrapperProps,
      children: e.children
    }
  ) : null });
}
function Kt(e) {
  const [t, n] = k(
    () => `
${Ht({
      cssCode: e.cssCode,
      contentId: e.contentId
    })}
${Bt({
      customFonts: e.customFonts
    })}
${qt(e.isNestedRender)}
`.trim()
  );
  return /* @__PURE__ */ S(
    ce,
    {
      id: "builderio-content",
      styles: t,
      nonce: e.nonce
    }
  );
}
const zt = ({
  content: e,
  data: t,
  locale: n
}) => {
  var l, a, i;
  const o = {}, r = ((l = e == null ? void 0 : e.data) == null ? void 0 : l.state) || {};
  return (i = (a = e == null ? void 0 : e.data) == null ? void 0 : a.inputs) == null || i.forEach((u) => {
    u.name && u.defaultValue !== void 0 && (o[u.name] = u.defaultValue);
  }), {
    ...o,
    ...r,
    ...t,
    ...n ? {
      locale: n
    } : {}
  };
}, Jt = ({
  content: e,
  data: t
}) => e ? {
  ...e,
  data: {
    ...e == null ? void 0 : e.data,
    ...t
  },
  meta: e == null ? void 0 : e.meta
} : void 0;
function se(e) {
  var m, g, R, T, A, s, d, D, U;
  const [t, n] = k(
    () => {
      var I, w;
      return Wt({
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-non-null-asserted-optional-chain
        variationId: (I = e.content) == null ? void 0 : I.testVariationId,
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-non-null-asserted-optional-chain
        contentId: (w = e.content) == null ? void 0 : w.id
      });
    }
  );
  function o(I) {
    i((w) => ({
      ...w,
      rootState: I
    }));
  }
  const [r, l] = k(
    () => [
      ...ie(),
      ...e.customComponents || []
    ].reduce(
      (I, { component: w, ...V }) => ({
        ...I,
        [V.name]: {
          component: w,
          ...ae(V)
        }
      }),
      {}
    )
  ), [a, i] = k(() => ({
    content: Jt({
      content: e.content,
      data: e.data
    }),
    localState: void 0,
    rootState: zt({
      content: e.content,
      data: e.data,
      locale: e.locale
    }),
    rootSetState: o,
    context: e.context || {},
    canTrack: e.canTrack,
    apiKey: e.apiKey,
    apiVersion: e.apiVersion,
    componentInfos: [
      ...ie(),
      ...e.customComponents || []
    ].reduce(
      (I, { component: w, ...V }) => ({
        ...I,
        [V.name]: ae(V)
      }),
      {}
    ),
    inheritedStyles: {},
    BlocksWrapper: e.blocksWrapper || "div",
    BlocksWrapperProps: e.blocksWrapperProps || {},
    nonce: e.nonce || "",
    model: e.model
  })), u = Y(!1);
  if (!u.current) {
    e.apiKey || Ce.error(
      "No API key provided to `Content` component. This can cause issues. Please provide an API key using the `apiKey` prop."
    );
    const I = (g = (m = a.content) == null ? void 0 : m.data) == null ? void 0 : g.jsCode;
    I && de({
      code: I,
      context: e.context || {},
      localState: void 0,
      rootState: a.rootState,
      rootSetState: (w) => {
        Object.assign(a.rootState, w);
      },
      isExpression: !1
    }), u.current = !0;
  }
  return /* @__PURE__ */ S(
    Le.Provider,
    {
      value: {
        registeredComponents: r
      },
      children: /* @__PURE__ */ H(
        Mt,
        {
          apiHost: e.apiHost,
          nonce: e.nonce,
          content: e.content,
          data: e.data,
          model: e.model,
          context: e.context,
          apiKey: e.apiKey,
          canTrack: e.canTrack,
          locale: e.locale,
          enrich: e.enrich,
          showContent: e.showContent,
          builderContextSignal: a,
          contentWrapper: e.contentWrapper,
          contentWrapperProps: e.contentWrapperProps,
          trustedHosts: e.trustedHosts,
          isNestedRender: e.isNestedRender,
          setBuilderContextSignal: i,
          children: [
            e.isSsrAbTest ? /* @__PURE__ */ S(
              q,
              {
                id: "builderio-variant-visibility",
                scriptStr: t,
                nonce: e.nonce || ""
              }
            ) : null,
            /* @__PURE__ */ S(
              Kt,
              {
                nonce: e.nonce || "",
                isNestedRender: e.isNestedRender,
                contentId: (R = a.content) == null ? void 0 : R.id,
                cssCode: (A = (T = a.content) == null ? void 0 : T.data) == null ? void 0 : A.cssCode,
                customFonts: (d = (s = a.content) == null ? void 0 : s.data) == null ? void 0 : d.customFonts
              }
            ),
            /* @__PURE__ */ S(
              Ue,
              {
                blocks: (U = (D = a.content) == null ? void 0 : D.data) == null ? void 0 : U.blocks,
                context: a,
                registeredComponents: r,
                linkComponent: e.linkComponent
              }
            )
          ]
        }
      )
    }
  );
}
function Qt(e) {
  var a;
  const [t, n] = k(
    () => Rt({
      canTrack: j(e.canTrack),
      content: e.content
    })
  );
  function o() {
    var i;
    return Ft(
      O(e.content).map((u) => ({
        id: u.testVariationId,
        testRatio: u.testRatio
      })),
      ((i = e.content) == null ? void 0 : i.id) || ""
    );
  }
  function r() {
    return O(e.content).map((i) => `.variant-${i.testVariationId} { display: none; } `).join("");
  }
  function l() {
    var i;
    return t ? {
      ...e.content,
      testVariationId: (i = e.content) == null ? void 0 : i.id
    } : we({
      item: e.content,
      canTrack: j(e.canTrack)
    });
  }
  return N(() => {
  }, []), /* @__PURE__ */ H(M, { children: [
    !e.isNestedRender && F !== "reactNative" ? /* @__PURE__ */ H(M, { children: [
      /* @__PURE__ */ S(
        q,
        {
          id: "builderio-init-variants-fns",
          scriptStr: Pt(),
          nonce: e.nonce || ""
        }
      ),
      fe.includes(F) ? /* @__PURE__ */ S(
        q,
        {
          id: "builderio-init-personalization-variants-fns",
          nonce: e.nonce || "",
          scriptStr: Ke()
        }
      ) : null
    ] }) : null,
    t ? /* @__PURE__ */ H(M, { children: [
      /* @__PURE__ */ S(
        ce,
        {
          id: "builderio-variants",
          styles: r(),
          nonce: e.nonce || ""
        }
      ),
      /* @__PURE__ */ S(
        q,
        {
          id: "builderio-variants-visibility",
          scriptStr: o(),
          nonce: e.nonce || ""
        }
      ),
      (a = O(e.content)) == null ? void 0 : a.map((i) => /* @__PURE__ */ S(
        se,
        {
          apiHost: e.apiHost,
          isNestedRender: e.isNestedRender,
          nonce: e.nonce,
          content: i,
          showContent: !1,
          model: e.model,
          data: e.data,
          context: e.context,
          apiKey: e.apiKey,
          apiVersion: e.apiVersion,
          customComponents: e.customComponents,
          linkComponent: e.linkComponent,
          canTrack: e.canTrack,
          locale: e.locale,
          enrich: e.enrich,
          isSsrAbTest: t,
          blocksWrapper: e.blocksWrapper,
          blocksWrapperProps: e.blocksWrapperProps,
          contentWrapper: e.contentWrapper,
          contentWrapperProps: e.contentWrapperProps,
          trustedHosts: e.trustedHosts
        },
        i.testVariationId
      ))
    ] }) : null,
    /* @__PURE__ */ S(
      se,
      {
        apiHost: e.apiHost,
        nonce: e.nonce,
        isNestedRender: e.isNestedRender,
        content: l(),
        showContent: !0,
        model: e.model,
        data: e.data,
        context: e.context,
        apiKey: e.apiKey,
        apiVersion: e.apiVersion,
        customComponents: e.customComponents,
        linkComponent: e.linkComponent,
        canTrack: e.canTrack,
        locale: e.locale,
        enrich: e.enrich,
        isSsrAbTest: t,
        blocksWrapper: e.blocksWrapper,
        blocksWrapperProps: e.blocksWrapperProps,
        contentWrapper: e.contentWrapper,
        contentWrapperProps: e.contentWrapperProps,
        trustedHosts: e.trustedHosts
      }
    )
  ] });
}
const ln = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Qt
}, Symbol.toStringTag, { value: "Module" }));
export {
  qe as DEFAULT_INDEX,
  q as InlinedScript,
  Me as SDKS_REQUIRING_RESET_APPROACH,
  nn as checkShouldRenderVariants,
  ln as contentVariants,
  tn as filterWithCustomTargeting,
  an as getBlocksToRender,
  on as getPersonalizationScript,
  rn as getUpdateVisibilityStylesScript
};
