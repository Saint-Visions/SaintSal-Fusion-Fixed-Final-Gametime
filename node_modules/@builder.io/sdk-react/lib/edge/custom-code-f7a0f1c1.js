import { jsx as l } from "react/jsx-runtime";
import { useRef as f, useState as p, useEffect as d } from "react";
import { isEditing as m, logger as g } from "./server-entry-fb5f2b80.js";
function T(r) {
  const n = f(null), [s, y] = p(() => []), [i, h] = p(() => []);
  function o() {
    var a;
    if (!n.current || !((a = n.current) != null && a.getElementsByTagName) || typeof window == "undefined")
      return;
    const u = n.current.getElementsByTagName("script");
    for (let c = 0; c < u.length; c++) {
      const e = u[c];
      if (e.src) {
        if (s.includes(e.src))
          continue;
        s.push(e.src);
        const t = document.createElement("script");
        t.async = !0, t.src = e.src, document.head.appendChild(t);
      } else if (!e.type || [
        "text/javascript",
        "application/javascript",
        "application/ecmascript"
      ].includes(e.type)) {
        if (i.includes(e.innerText))
          continue;
        try {
          i.push(e.innerText), new Function(e.innerText)();
        } catch (t) {
          g.warn(
            "[BUILDER.IO] `CustomCode`: Error running script:",
            t
          );
        }
      }
    }
  }
  return d(() => {
    o();
  }, []), d(() => {
    m() && o();
  }, [r.code]), /* @__PURE__ */ l(
    "div",
    {
      ref: n,
      className: "builder-custom-code" + (r.replaceNodes ? " replace-nodes" : ""),
      dangerouslySetInnerHTML: { __html: r.code }
    }
  );
}
export {
  T as default
};
