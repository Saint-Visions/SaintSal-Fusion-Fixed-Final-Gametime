import { jsx as y } from "react/jsx-runtime";
import { useState as b, useEffect as f } from "react";
import { Content as K } from "./blocks-exports.mjs";
import { getClassPropName as S } from "./get-class-prop-name-770bdff2.js";
import { fetchOneEntry as E, logger as N } from "./server-entry-fb5f2b80.js";
const W = async ({
  builderContextValue: t,
  symbol: n
}) => {
  if (n != null && n.model && // This is a hack, we should not need to check for this, but it is needed for Svelte.
  (t != null && t.apiKey))
    return E({
      model: n.model,
      apiKey: t.apiKey,
      apiVersion: t.apiVersion,
      ...(n == null ? void 0 : n.entry) && {
        query: {
          id: n.entry
        }
      }
    }).catch((r) => {
      N.error("Could not fetch symbol content: ", r);
    });
};
function q(t) {
  var a, c, m, l, d;
  function n() {
    return "div";
  }
  function r() {
    return "div";
  }
  function s() {
    return Object.values(t.builderComponents);
  }
  function C() {
    var e, o;
    return [
      t.attributes[S()],
      "builder-symbol",
      (e = t.symbol) != null && e.inline ? "builder-inline-symbol" : void 0,
      (o = t.symbol) != null && o.dynamic || t.dynamic ? "builder-dynamic-symbol" : void 0
    ].filter(Boolean).join(" ");
  }
  const [i, v] = b(() => {
    var e;
    return (e = t.symbol) == null ? void 0 : e.content;
  }), [k, h] = b(() => {
    var e;
    return (e = t.symbol) == null ? void 0 : e.entry;
  });
  function x() {
    var e;
    i && k === ((e = t.symbol) == null ? void 0 : e.entry) || W({
      symbol: t.symbol,
      builderContextValue: t.builderContext
    }).then((o) => {
      var u;
      o && (v(o), h((u = t.symbol) == null ? void 0 : u.entry));
    });
  }
  return f(() => {
  }, []), f(() => {
    x();
  }, [t.symbol]), /* @__PURE__ */ y("div", { ...t.attributes, className: C(), children: /* @__PURE__ */ y(
    K,
    {
      nonce: t.builderContext.nonce,
      isNestedRender: !0,
      apiVersion: t.builderContext.apiVersion,
      apiKey: t.builderContext.apiKey,
      context: {
        ...t.builderContext.context,
        symbolId: (a = t.builderBlock) == null ? void 0 : a.id
      },
      customComponents: s(),
      data: {
        ...(c = t.symbol) == null ? void 0 : c.data,
        ...t.builderContext.localState,
        ...(m = i == null ? void 0 : i.data) == null ? void 0 : m.state
      },
      canTrack: t.builderContext.canTrack,
      model: (d = (l = t.symbol) == null ? void 0 : l.model) != null ? d : "",
      content: i,
      linkComponent: t.builderLinkComponent,
      blocksWrapper: n(),
      contentWrapper: r()
    }
  ) });
}
export {
  q as default
};
